// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// expectation_gRcpp
arma::vec expectation_gRcpp(arma::vec g_a_j, arma::vec g_a_jp1, arma::vec mu, arma::vec sigma, arma::vec Jmax);
RcppExport SEXP _countSTAR_expectation_gRcpp(SEXP g_a_jSEXP, SEXP g_a_jp1SEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP JmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type g_a_j(g_a_jSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type g_a_jp1(g_a_jp1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Jmax(JmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(expectation_gRcpp(g_a_j, g_a_jp1, mu, sigma, Jmax));
    return rcpp_result_gen;
END_RCPP
}
// interval_gRcpp
arma::mat interval_gRcpp(arma::vec g_a_j, arma::vec g_a_jp1, arma::vec L_mu, arma::vec U_mu, arma::vec sigma, arma::vec Jmax);
RcppExport SEXP _countSTAR_interval_gRcpp(SEXP g_a_jSEXP, SEXP g_a_jp1SEXP, SEXP L_muSEXP, SEXP U_muSEXP, SEXP sigmaSEXP, SEXP JmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type g_a_j(g_a_jSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type g_a_jp1(g_a_jp1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type L_mu(L_muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type U_mu(U_muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Jmax(JmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_gRcpp(g_a_j, g_a_jp1, L_mu, U_mu, sigma, Jmax));
    return rcpp_result_gen;
END_RCPP
}
// rtruncnormRcpp
arma::vec rtruncnormRcpp(arma::vec y_lower, arma::vec y_upper, arma::vec mu, arma::vec sigma, arma::vec u_rand);
RcppExport SEXP _countSTAR_rtruncnormRcpp(SEXP y_lowerSEXP, SEXP y_upperSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP u_randSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y_lower(y_lowerSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y_upper(y_upperSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type u_rand(u_randSEXP);
    rcpp_result_gen = Rcpp::wrap(rtruncnormRcpp(y_lower, y_upper, mu, sigma, u_rand));
    return rcpp_result_gen;
END_RCPP
}
// logLikeRcpp
double logLikeRcpp(arma::vec g_a_j, arma::vec g_a_jp1, arma::vec mu, arma::vec sigma);
RcppExport SEXP _countSTAR_logLikeRcpp(SEXP g_a_jSEXP, SEXP g_a_jp1SEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type g_a_j(g_a_jSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type g_a_jp1(g_a_jp1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikeRcpp(g_a_j, g_a_jp1, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// logLikePointRcpp
arma::vec logLikePointRcpp(arma::vec g_a_j, arma::vec g_a_jp1, arma::vec mu, arma::vec sigma);
RcppExport SEXP _countSTAR_logLikePointRcpp(SEXP g_a_jSEXP, SEXP g_a_jp1SEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type g_a_j(g_a_jSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type g_a_jp1(g_a_jp1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikePointRcpp(g_a_j, g_a_jp1, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// expectation2_gRcpp
arma::vec expectation2_gRcpp(arma::vec g_a_j, arma::vec g_a_jp1, arma::vec mu, arma::vec sigma, arma::vec Jmax);
RcppExport SEXP _countSTAR_expectation2_gRcpp(SEXP g_a_jSEXP, SEXP g_a_jp1SEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP JmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type g_a_j(g_a_jSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type g_a_jp1(g_a_jp1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Jmax(JmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(expectation2_gRcpp(g_a_j, g_a_jp1, mu, sigma, Jmax));
    return rcpp_result_gen;
END_RCPP
}
// pmaxRcpp
arma::mat pmaxRcpp(arma::vec v1, arma::vec v2);
RcppExport SEXP _countSTAR_pmaxRcpp(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(pmaxRcpp(v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// pminRcpp
arma::mat pminRcpp(arma::vec v1, arma::vec v2);
RcppExport SEXP _countSTAR_pminRcpp(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(pminRcpp(v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// expectation_identity
arma::mat expectation_identity(arma::vec a, arma::mat Jmax, arma::mat Mu, arma::vec sigma_t, arma::mat Offset);
RcppExport SEXP _countSTAR_expectation_identity(SEXP aSEXP, SEXP JmaxSEXP, SEXP MuSEXP, SEXP sigma_tSEXP, SEXP OffsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Jmax(JmaxSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Mu(MuSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma_t(sigma_tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Offset(OffsetSEXP);
    rcpp_result_gen = Rcpp::wrap(expectation_identity(a, Jmax, Mu, sigma_t, Offset));
    return rcpp_result_gen;
END_RCPP
}
// expectation_log
arma::mat expectation_log(arma::vec a, arma::mat Jmax, arma::mat Mu, arma::vec sigma_t, arma::mat Offset);
RcppExport SEXP _countSTAR_expectation_log(SEXP aSEXP, SEXP JmaxSEXP, SEXP MuSEXP, SEXP sigma_tSEXP, SEXP OffsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Jmax(JmaxSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Mu(MuSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma_t(sigma_tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Offset(OffsetSEXP);
    rcpp_result_gen = Rcpp::wrap(expectation_log(a, Jmax, Mu, sigma_t, Offset));
    return rcpp_result_gen;
END_RCPP
}
// expectation_sqrt
arma::mat expectation_sqrt(arma::vec a, arma::mat Jmax, arma::mat Mu, arma::vec sigma_t, arma::mat Offset);
RcppExport SEXP _countSTAR_expectation_sqrt(SEXP aSEXP, SEXP JmaxSEXP, SEXP MuSEXP, SEXP sigma_tSEXP, SEXP OffsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Jmax(JmaxSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Mu(MuSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma_t(sigma_tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Offset(OffsetSEXP);
    rcpp_result_gen = Rcpp::wrap(expectation_sqrt(a, Jmax, Mu, sigma_t, Offset));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_countSTAR_expectation_gRcpp", (DL_FUNC) &_countSTAR_expectation_gRcpp, 5},
    {"_countSTAR_interval_gRcpp", (DL_FUNC) &_countSTAR_interval_gRcpp, 6},
    {"_countSTAR_rtruncnormRcpp", (DL_FUNC) &_countSTAR_rtruncnormRcpp, 5},
    {"_countSTAR_logLikeRcpp", (DL_FUNC) &_countSTAR_logLikeRcpp, 4},
    {"_countSTAR_logLikePointRcpp", (DL_FUNC) &_countSTAR_logLikePointRcpp, 4},
    {"_countSTAR_expectation2_gRcpp", (DL_FUNC) &_countSTAR_expectation2_gRcpp, 5},
    {"_countSTAR_pmaxRcpp", (DL_FUNC) &_countSTAR_pmaxRcpp, 2},
    {"_countSTAR_pminRcpp", (DL_FUNC) &_countSTAR_pminRcpp, 2},
    {"_countSTAR_expectation_identity", (DL_FUNC) &_countSTAR_expectation_identity, 5},
    {"_countSTAR_expectation_log", (DL_FUNC) &_countSTAR_expectation_log, 5},
    {"_countSTAR_expectation_sqrt", (DL_FUNC) &_countSTAR_expectation_sqrt, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_countSTAR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
