% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/source_EM.R
\name{star_CI}
\alias{star_CI}
\title{Compute asymptotic confidence intervals for STAR linear regression}
\usage{
star_CI(y, X, j, alpha = 0.05, include_plot = TRUE,
  transformation = "log", lambda = NULL, y_max = Inf, tol = 10^-10,
  max_iters = 1000)
}
\arguments{
\item{y}{\code{n x 1} vector of observed counts}

\item{X}{\code{n x p} design matrix of predictors}

\item{j}{the scalar column index for the desired confidence interval}

\item{alpha}{confidence level; default is 0.05}

\item{include_plot}{logical; if TRUE, include a plot of the profile likelihood}

\item{transformation}{transformation to use for the latent process; must be one of
\itemize{
\item "identity" (identity transformation)
\item "log" (log transformation)
\item "sqrt" (square root transformation)
\item "box-cox" (box-cox transformation)
}}

\item{lambda}{the nonlinear parameter for the Box-Cox transformation; otherwise ignored}

\item{y_max}{a fixed and known upper bound for all observations; default is \code{Inf}}

\item{tol}{tolerance for stopping the EM algorithm; default is 10^-10;}

\item{max_iters}{maximum number of EM iterations before stopping; default is 1000}
}
\value{
the upper and lower endpoints of the confidence interval
}
\description{
For a linear regression model within the STAR framework,
compute (asymptotic) confidence intervals for a regression coefficient of interest.
Confidence intervals are computed by inverting the likelihood ratio test and
profiling the log-likelihood.
}
\note{
The design matrix \code{X} should include an intercept.
}
\examples{
# Simulate data with count-valued response y:
sim_dat = simulate_nb_lm(n = 100, p = 2)
y = sim_dat$y; X = sim_dat$X

# EM algorithm for STAR (using the log-link)
fit_em = star_EM(y = y,
                 estimator = function(y) lm(y ~ X - 1),
                 transformation = 'box-cox',
                 lambda = 0)

# Confidence interval for the intercept:
ci_beta_0 = star_CI(y = y, X = X,
                   j = 1,
                   transformation = fit_em$transformation,
                   lambda = fit_em$lambda)
ci_beta_0

# Confidence interval for the slope:
ci_beta_1 = star_CI(y = y, X = X,
                   j = 2,
                   transformation = fit_em$transformation,
                   lambda = fit_em$lambda)
ci_beta_1

}
